/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Author: Eu
 *
 */

#include <cmath>
#include <algorithm>
#include <limits>
#include <sstream>
#include "ns3/log.h"
#include "ns3/uinteger.h"
#include "ns3/address.h"
#include "ns3/mac48-address.h"
#include "ns3/mobility-model.h"
#include "ns3/trace-source-accessor.h"
#include "ns3/nstime.h"
#include "ns3/boolean.h"
#include "bp-rt-antmofo.h"
#include "bp-header.h"
#include "bp-contact.h"
#include "bp-link-manager.h"
#include "bp-neighbourhood-detection-agent.h"

NS_LOG_COMPONENT_DEFINE ("RTAntMofo");

namespace ns3 {
namespace bundleProtocol {

NS_OBJECT_ENSURE_REGISTERED (RTAntMofo);

TypeId RTAntMofo::GetTypeId(void) {
        static TypeId tid = TypeId ("ns3::bundleProtocol::RTAntMofo")
                .SetParent<BundleRouter> ()
                .AddConstructor<RTAntMofo> ()
                .AddAttribute ("AlwaysSendHello",
                                "Sets if the router always should send hellos or only when it have something to send.",
                                BooleanValue (false),
                                MakeBooleanAccessor (&RTAntMofo::m_alwaysSendHello),
                                MakeBooleanChecker ())
                .AddTraceSource ("RedundantRelay", "A message already held in the buffer has been received.",
                                MakeTraceSourceAccessor (&RTAntMofo::m_redundantRelayLogger));

        return tid;
}

RTAntMofo::RTAntMofo() : BundleRouter(), m_send_timer((Timer::CANCEL_ON_DESTROY))
{
        StreetInfo info(0.5,0.0);
        m_wt[0] = info;


}

RTAntMofo::~RTAntMofo()
{
}

void RTAntMofo::DoInit()
{
        if (m_alwaysSendHello) {
                m_nda->Start();
        }
}

void RTAntMofo::DoDispose()
{
        BundleRouter::DoDispose();
}

void RTAntMofo::DoLinkClosed(Ptr<Link> link)
{
        if (link->GetContact() != 0) {
                BundleList bundles = link->GetContact()->GetQueuedBundles();
                for (BundleList::iterator iter = bundles.begin(); iter != bundles.end(); ++iter) {
                        link->GetContact()->DequeueBundle(*iter);
                        CancelTransmission(*iter, link);
                }
        }

        RemoveRouterSpecificBundles(link);
}

void RTAntMofo::RemoveRouterSpecificBundles(Ptr<Link> link)
{
}

void RTAntMofo::PauseLink(Ptr<Link> link)
{
        if (link->GetState() == LINK_CONNECTED) {
                BundleList bundles = link->GetContact()->GetQueuedBundles();

                for (BundleList::iterator iter = bundles.begin(); iter != bundles.end(); ++iter) {
                        link->GetContact()->DequeueBundle(*iter);
                        CancelTransmission(*iter, link);
                }

                link->ChangeState(LINK_PAUSED);

                Ptr<Contact> c = link->GetContact();

                if (c->GetRetransmissions() >= m_maxRetries) {
                        m_linkManager->CloseLink(link);
                } else {
                        c->IncreaseRetransmissions();
                        Simulator::Schedule(m_pauseTime,
                                        &RTAntMofo::UnPauseLink, this, link);
                }
        }
        Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
}

void RTAntMofo::UnPauseLink(Ptr<Link> link)
{
        if (link->GetState() == LINK_PAUSED) {
                link->ChangeState(LINK_CONNECTED);
                Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
        }
}

void RTAntMofo::DoLinkDiscovered(Ptr<Link> link)
{
        m_linkManager->OpenLink(link);
        Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
}

void RTAntMofo::DoBundleReceived(Ptr<Bundle> bundle)
{
        SetBundleReceived("RTAntMofo.out",bundle);
        Ptr<Link> link = m_linkManager->FindLink(
                        bundle->GetReceivedFrom().front().GetEndpoint());
        if (link != 0) {
                link->UpdateLastHeardFrom();
        }
}

Ptr<Bundle> RTAntMofo::DoSendBundle(Ptr<Link> link, Ptr<Bundle> bundle)
{
        link->GetContact()->EnqueueBundle(bundle);
        Ptr<Bundle> send = bundle->Copy();
        send->SetLifetime(200);
        return send;
}

void RTAntMofo::DoBundleSent(const Address& address,
                const GlobalBundleIdentifier& gbid, bool finalDelivery)
{
        Mac48Address mac = Mac48Address::ConvertFrom(address);
        Ptr<Link> link = m_linkManager->FindLink(mac);

        Ptr<Bundle> bundle = GetBundle(gbid);
        if (bundle != 0) {
                // I have received an ack for the sent bundle, so i have heard from the
                // other node.
                link->UpdateLastHeardFrom();

                if (link->GetState() == LINK_CONNECTED || link->GetState()
                                == LINK_PAUSED) {
                        link->GetContact()->DequeueBundle(gbid);
                        link->GetContact()->ResetRetransmissions();
                }

                m_forwardLog.AddEntry(bundle, link);

                if (finalDelivery) {
                        BundleDelivered(bundle, true);
                }

                Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
        } else {
                if (finalDelivery) {
                        // This is a ugly hack utilitzing the fact that i know that
                        // the ttl is "inifinite".
                        Ptr<Bundle> bundle = Create<Bundle> ();
                        bundle->SetSourceEndpoint(gbid.GetSourceEid());
                        bundle->SetCreationTimestamp(gbid.GetCreationTimestamp());
                        bundle->SetLifetime(43000);
                        BundleDelivered(bundle, true);

                        Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
                }
        }
}

void RTAntMofo::DoBundleTransmissionFailed(const Address& address,
                const GlobalBundleIdentifier& gbid)
{
        Mac48Address mac = Mac48Address::ConvertFrom(address);
        Ptr<Link> link = m_linkManager->FindLink(mac);
        PauseLink(link);
}

bool RTAntMofo::DoAcceptBundle(Ptr<Bundle> bundle,
                bool fromApplication)
{
        if (HasBundle(bundle)) {
                m_redundantRelayLogger(bundle);
                Ptr<Bundle> otherBundle = GetBundle(bundle->GetBundleId());
                otherBundle->AddReceivedFrom(bundle->GetReceivedFrom().front());
                return false;
        }
        return CanMakeRoomForBundle(bundle);
}

bool RTAntMofo::DoCanDeleteBundle(const GlobalBundleIdentifier& gbid)
{
        return true;
}

void RTAntMofo::DoInsert(Ptr<Bundle> bundle)
{
        // This is my extra thing, i always set the eid to current node holding the bundle.
        bundle->SetCustodianEndpoint(m_eid);

        m_bundleList.push_back(bundle);

        // If this is the first bundle, I now want to begin sending hello messages announcing that
        // I have something to send. If there is more than one bundle in the queue this means that
        // I already have started sending hello messages.
       // if (m_nBundles == 1 && !m_alwaysSendHello) {
                m_nda->Start();
        //}

        Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
}

bool RTAntMofo::CanMakeRoomForBundle(Ptr<Bundle> bundle)
{
        if (bundle->GetSize() < m_maxBytes) {
                return true;
        } else {
                return false;
        }

}

bool RTAntMofo::MakeRoomForBundle(Ptr<Bundle> bundle)
{
        if (bundle->GetSize() < m_maxBytes) {
                if (bundle->GetSize() < GetFreeBytes()) {
                        return true;
                }

                for (BundleList::reverse_iterator iter = m_bundleList.rbegin(); iter
                                != m_bundleList.rend();) {
                        Ptr<Bundle> currentBundle = *(iter++);

                        DeleteBundle(currentBundle, true);
                        if (bundle->GetSize() < GetFreeBytes()) {
                                return true;
                        }
                }
        }

        return false;
}

bool RTAntMofo::DoDelete(const GlobalBundleIdentifier& gbid,
                bool drop)
{
        // If this is the last bundle in the queue, stop sending Hello messages.
        if (m_nBundles == 1 && !m_alwaysSendHello) {
                m_nda->Stop();
        }
        if (drop)/*drop = true indica que o bundle expirou por isso est√° sendo apagado*/
        {
                SetBundleExpired("RTAntMofo.expired");
        }
        return BundleRouter::DoDelete(gbid, drop);
}

void RTAntMofo::DoCancelTransmission(Ptr<Bundle> bundle,
                Ptr<Link> link)
{
}

void RTAntMofo::DoTransmissionCancelled(const Address& address,
                const GlobalBundleIdentifier& gbid)
{
        Mac48Address mac = Mac48Address::ConvertFrom(address);
        Ptr<Link> link = m_linkManager->FindLink(mac);

        /*Joao*/
        if(link->GetContact())
        {
          link->GetContact()->DequeueBundle(gbid);
        }
        /*Joao*/
        Simulator::ScheduleNow(&RTAntMofo::TryToStartSending, this);
}

void RTAntMofo::TryToStartSending()
{
        NS_LOG_DEBUG("(" << m_node->GetId () << ")");
        RemoveExpiredBundles(true);
        m_forwardLog.RemoveExpiredEntries();

        if (!IsSending() && (GetNBundles() > 0)) {
                LinkBundle linkBundle = FindNextToSend();
                if (!linkBundle.IsNull()) {
                        SendBundle(linkBundle.GetLink(), linkBundle.GetBundle());
                } else {
                        Simulator::Schedule (Seconds(1.0), &RTAntMofo::TryToStartSending, this);
                }
        }
}

LinkBundle RTAntMofo::FindNextToSend()
{
        NS_LOG_DEBUG("RTAntMofo::FindNextToSend");
        NS_LOG_DEBUG("(" << m_node->GetId() << ") - m_linkManager->GetConnectedLinks().size()= " << m_linkManager->GetConnectedLinks().size() << " GetNBundles() = " << GetNBundles() );
        if ((m_linkManager->GetConnectedLinks().size() > 0) && (GetNBundles() > 0)) {
                LinkBundleList linkBundleList = GetAllDeliverableBundles();
                if (!linkBundleList.empty()) {
                        return linkBundleList.front();
                }
        }
        return LinkBundle(0, 0);
}

LinkBundle RTAntMofo::GetNextRouterSpecific()
{
        return LinkBundle(0, 0);
}

LinkBundleList RTAntMofo::GetAllDeliverableBundles()
{
        Links links = m_linkManager->GetConnectedLinks();
        LinkBundleList result;
        for (Links::iterator iter = links.begin(); iter != links.end(); ++iter) {
                Ptr<Link> link = *iter;
                LinkBundleList linkBundleList = GetAllBundlesForLink(link);
                result.insert(result.end(), linkBundleList.begin(),
                                linkBundleList.end());
        }
        return result;
}

LinkBundleList RTAntMofo::GetAllBundlesForLink(Ptr<Link> link)
{
        LinkBundleList linkBundleList;
        if (link->GetState() == LINK_CONNECTED) {
                if (link->GetState() == LINK_CONNECTED) {
                        for (BundleList::iterator iter = m_bundleList.begin(); iter
                                        != m_bundleList.end(); ++iter) {
                                Ptr<Bundle> bundle = *iter;
                                /*
                                if (bundle->HasRetentionConstraint(RC_FORWARDING_PENDING)
                                                && !bundle->HaveBeenReceivedFrom(link)
                                                && (link->GetRemoteEndpointId()
                                                                == bundle->GetDestinationEndpoint())
                                                && !m_forwardLog.HasEntry(bundle, link)) {
                                        linkBundleList.push_back(LinkBundle(link, *iter));
                                }
                                */
                                /* agora n√£o tem mais restri√ß√£o de EID - virou epid√™mico */
                                if (!bundle->HaveBeenReceivedFrom(link)
                                                && !m_forwardLog.HasEntry(bundle, link)) {
                                        linkBundleList.push_back(LinkBundle(link, *iter));
                                }

                        }
                }
        }
        return linkBundleList;
}

uint8_t RTAntMofo::DoCalculateReplicationFactor(
                const BundlePriority& priority) const
{
        return 1;
}

bool RTAntMofo::DoIsRouterSpecific(Ptr<Bundle> bundle)
{
        return false;
}

bool RTAntMofo::DoIsRouterSpecific(const BlockType& block)
{
        return false;
}

void RTAntMofo::SendRouterSpecific(Ptr<Link> link,
                Ptr<Bundle> bundle)
{
}

void RTAntMofo::SentRouterSpecific(Ptr<Link> link,
                const GlobalBundleIdentifier& gbid)
{
}

void RTAntMofo::ReceiveRouterSpecific(Ptr<Bundle> bundle)
{
}

void RTAntMofo::AddRouterSpecificBundle(Ptr<Bundle> bundle)
{
}

void RTAntMofo::RemoveRouterSpecificBundle(
                const GlobalBundleIdentifier& gbid, uint8_t reason)
{
}

bool RTAntMofo::HasRouterSpecificBundle(
                const GlobalBundleIdentifier& gbid)
{
        return false;
}

Ptr<Bundle> RTAntMofo::GetRouterSpecificBundle(
                const GlobalBundleIdentifier& gbid)
{
        return Create<Bundle> ();
}

void RTAntMofo::DoBundleDelivered(Ptr<Bundle> bundle, bool fromAck) {
        NS_LOG_DEBUG("(" << m_node->GetId() << ") - From = " << bundle->GetCustodianEndpoint() << " - fromAck = " << fromAck);

        m_kdm.Insert(bundle);

        BundleList bl;
        for (BundleList::iterator iter = m_bundleList.begin(); iter != m_bundleList.end(); ++iter) {
                NS_LOG_DEBUG("--> BUNDLE EID: " << (*iter)->GetCustodianEndpoint());
                Ptr<Bundle> bundle = *iter;
                if (m_kdm.Has(bundle)) {
                        bl.push_back(bundle);
                        m_forwardLog.RemoveEntriesFor(bundle->GetBundleId());
                }
        }

        for (BundleList::iterator iter = bl.begin(); iter != bl.end(); ++iter) {
                NS_LOG_DEBUG("--> Delivered EID: " << (*iter)->GetBundleId());
                DeleteBundle(*iter, false);
        }
}

Ptr<Link> RTAntMofo::DoCreateLink(const BundleEndpointId& eid, const Address& address)
{
        //NS_LOG_DEBUG ("(" << m_node->GetId () << ") "  << "RTAntMofo::DoCreateLink");
        Ptr<ConvergenceLayerAgent> cla = m_node->GetObject<BundleProtocolAgent>()->GetConvergenceLayerAgent();
        Ptr<Link> link = CreateObject<Link> ();

        link->SetLinkLostCallback(MakeCallback(&ConvergenceLayerAgent::LinkLost, cla));

        link->SetRemoteEndpointId(eid);
        link->SetRemoteAddress(address);

        return link;
}

/*sergioviera*/
void RTAntMofo::DoSendHello(Ptr<Socket> socket, BundleEndpointId eid)
{
          AntMofoHelloHeader header;
          header.SetBundleEndpointId(eid);

          Ptr<MobilityModel> mobilityModel = m_node->GetObject<MobilityModel> ();

          NS_LOG_DEBUG("(" << m_node->GetId() <<")" << " eid: " <<eid);


          for (TableNeighbors::iterator it = m_tn.begin(); it != m_tn.end(); it++)
          {
            header.addNeigh(*it);
          }

          header.setPos(mobilityModel->GetPosition().x, mobilityModel->GetPosition().y);
          header.setVel(mobilityModel->GetVelocity().x, mobilityModel->GetVelocity().y);


          //header.addProbability( (*it).first, (*it).second.prob[(*it).first] );
          Ptr<Packet> hello = Create<Packet>();
          /* Defino que o identificador de ProphetHelloHeader vale 1 */
          TypeTag type(6);
          hello->AddPacketTag(type);
          hello->AddHeader(header);
          socket->Send(hello);
          //m_sendLogger(hello);
}
void RTAntMofo::DoHandleHello(Ptr<Socket> socket)
{
          Ptr<MobilityModel> mm = m_node->GetObject<MobilityModel> ();
          Ptr<Packet> receivedHello;
          Address fromAddress;
          receivedHello = socket->RecvFrom(fromAddress);

          /* Toda vez que criar um novo Header deve-se escolher um valor para ele, e isto deve ser colocado dentro
           * LinkManager::DiscoveredLink
           */
          AntMofoHelloHeader header;
          receivedHello->PeekHeader(header);

          NS_LOG_DEBUG("eid " <<header.GetBundleEndpointId()<< " Pos " <<header.getPos().x<<"--"<<header.getPos().y<<"-- Vel " <<header.getVel().x <<"--" << header.getVel().y);

          //NS_LOG_DEBUG ("(" << m_node->GetId () << ") - " << mm->GetPosition () << " From " << header.GetBundleEndpointId());

          m_tn.insert(header.GetBundleEndpointId());

          PrintTableH();

          Simulator::ScheduleNow(&NeighbourhoodDetectionAgent::NotifyDiscoveredLink, m_nda, receivedHello, fromAddress);
}

void RTAntMofo::PrintTableH()
{
    NS_LOG_DEBUG("Table of Neighs of " << m_node->GetId());
    for (TableNeighbors::iterator it = m_tn.begin(); it != m_tn.end(); it++)
    {
        NS_LOG_DEBUG(":"<<*it);
    }
}
/*sergioviera*/

}
} // namespace bundleProtocol, ns3
